#include "drivers/mss_gpio/mss_gpio.h"
#include "drivers/mss_timer/mss_timer.h"
#include "drivers/mss_uart/mss_uart.h"
#include "drivers/CoreUARTapb/core_uart_apb.h"

#include <stdio.h>
#include <inttypes.h>

#include "imu.h"
#include "display.h"

#define CONTROLLER_ADDR 0x40050000
#define SERVO_LEFT_ADDR 0x40050100
#define SERVO_RIGHT_ADDR 0x40050200
#define APB_UART 0x40050300

#define NUMBER_SAMPLES 100

#define DT 0.001
#define KP 100
#define KD 5

float ANGLE = 0;
float SPEED = 0;

int16_t X_GYRO;
int16_t Y_ACCL;

float gyro_average( void )
{
	int i;

	static int16_t gyro_avgs[NUMBER_SAMPLES];
	static int index_gyro = 0;

	gyro_avgs[index_gyro] = X_GYRO;

	index_gyro++;
	if (index_gyro >= NUMBER_SAMPLES) index_gyro = 0;

	int32_t total_gyro = 0;
	for (i = 0; i < NUMBER_SAMPLES; ++i) {
		total_gyro += gyro_avgs[i];
	}
	float gyro_avg = total_gyro / NUMBER_SAMPLES;

	return gyro_avg;
}

float accl_average( void)
{
	int i;

	static int16_t accl_avgs[NUMBER_SAMPLES];
	static int index_accl = 0;

	accl_avgs[index_accl] = Y_ACCL;

	index_accl++;
	if (index_accl >= NUMBER_SAMPLES) index_accl = 0;

	int32_t total_accl = 0;
	for (i = 0; i < NUMBER_SAMPLES; ++i) {
		total_accl += accl_avgs[i];
	}
	float accl_avg = total_accl / NUMBER_SAMPLES;

	return accl_avg;
}

void Timer1_IRQHandler( void )
{
    float rate = (X_GYRO ) / 131;
    float accl_angle = (Y_ACCL * 90) / 16384;

    //combine accelerometer and gyroscope
    ANGLE = ((0.98) * (ANGLE + rate * DT) + (0.02) * accl_angle);

    //printf("angle: %f\r\n", ANGLE);

    //controller
    SPEED -= ANGLE * KP + rate * KD;


    //make bounds
    if (ANGLE < 5 && ANGLE > -5)
    	SPEED = 0;
    else if (SPEED > 10000)
    	SPEED = 10000;
    else if (SPEED < -10000)
    	SPEED = -10000;

    printf("speed: %f\r\n", SPEED);
    //scale SPEED
   // SPEED *=

    MSS_GPIO_set_output(MSS_GPIO_1, 0);

    MSS_TIM1_clear_irq();
}

int main() {
	//MSS_GPIO_init();
	//MSS_GPIO_config( MSS_GPIO_0, MSS_GPIO_OUTPUT_MODE);
	//MSS_GPIO_config( MSS_GPIO_1, MSS_GPIO_OUTPUT_MODE);
	//MSS_I2C_init(&g_mss_i2c1 , IMU_ADDRESS_WRITE, MSS_I2C_PCLK_DIV_256 );
	//imu_init();

	//MSS_GPIO_set_output(MSS_GPIO_0, 1);

	//one timer tick is 10ns at 100Mhz

	//MSS_TIM1_init( MSS_TIMER_PERIODIC_MODE);
	//MSS_TIM1_enable_irq();
	//MSS_TIM1_load_background(100000);
	//MSS_TIM1_start();


	/* Receive Side */
//	MSS_UART_init(
//		&g_mss_uart1, MSS_UART_9600_BAUD,
//		(MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT));


	/* Transmit Side */
	UART_instance_t xbee;
	UART_init(&xbee, APB_UART, 650, (DATA_8_BITS | NO_PARITY));


	while( 1 ) {
	    /*
		X_GYRO = imu_gyro_x();
	    Y_ACCL = imu_accl_y();

		//150000 = 1.5ms pulse
		//1.49ms pulse = equilibrium point

		uint32_t volatile *servo_left = (uint32_t *) SERVO_LEFT_ADDR;
		uint32_t volatile *servo_right = (uint32_t *) SERVO_RIGHT_ADDR;

		*servo_right = 150000 + SPEED;
		*servo_left = 150000 - SPEED;

		*/

		/* TRANSMIT SIDE */
		uint32_t volatile *controller = (uint32_t *) CONTROLLER_ADDR;
		uint32_t buttons = *controller;
		printButtons(buttons);

		uint8_t buttonMsg[4];
		buttonMsg[0] = buttons;			// Break up buttons into 4x 8 bit chunks
		buttonMsg[1] = (buttons >> 8);
		buttonMsg[2] = (buttons >> 16);
		buttonMsg[3] = (buttons >> 24);
		UART_send(&xbee, (uint8_t *)&buttonMsg, sizeof(buttonMsg));

		/* RECEIVE SIDE */
//		uint8_t rx_buttons[4];
//		uint32_t rx_size = MSS_UART_get_rx( &g_mss_uart1, rx_buttons, sizeof(rx_buttons));
//		uint32_t buttons;
//		if (rx_size > 0){
//			//process_rx_data(rx_buttons, rx_size);
//			printf("%x%x%x%x\r\n", rx_buttons[0], rx_buttons[1], rx_buttons[2], rx_buttons[3]);
//			buttons = rx_buttons[3];
//			buttons = ((buttons << 8) | rx_buttons[2]);
//			buttons = ((buttons << 8) | rx_buttons[1]);
//			buttons = ((buttons << 8) | rx_buttons[0]);
//			printButtons(buttons);
//		}



//
//		if (getA(buttons)) {
//			SPEED = 100000;
//		} else if (getB(buttons)) {
//			SPEED = -100000;
//		} else {
//			SPEED = 0;
//		}
//		printf("a: %u\r\n", getA(buttons));
//		printf("b: %u\r\n", getB(buttons));
	}

	return 0;
}
